// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package person is a generated GoMock package.
package person

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mockstorage is a mock of storage interface.
type Mockstorage struct {
	ctrl     *gomock.Controller
	recorder *MockstorageMockRecorder
}

// MockstorageMockRecorder is the mock recorder for Mockstorage.
type MockstorageMockRecorder struct {
	mock *Mockstorage
}

// NewMockstorage creates a new mock instance.
func NewMockstorage(ctrl *gomock.Controller) *Mockstorage {
	mock := &Mockstorage{ctrl: ctrl}
	mock.recorder = &MockstorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstorage) EXPECT() *MockstorageMockRecorder {
	return m.recorder
}

// CreatePerson mocks base method.
func (m *Mockstorage) CreatePerson(ctx context.Context, person Person) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePerson", ctx, person)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePerson indicates an expected call of CreatePerson.
func (mr *MockstorageMockRecorder) CreatePerson(ctx, person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePerson", reflect.TypeOf((*Mockstorage)(nil).CreatePerson), ctx, person)
}

// DeletePerson mocks base method.
func (m *Mockstorage) DeletePerson(ctx context.Context, id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePerson", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePerson indicates an expected call of DeletePerson.
func (mr *MockstorageMockRecorder) DeletePerson(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePerson", reflect.TypeOf((*Mockstorage)(nil).DeletePerson), ctx, id)
}

// GetPerson mocks base method.
func (m *Mockstorage) GetPerson(ctx context.Context, id int) (Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPerson", ctx, id)
	ret0, _ := ret[0].(Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPerson indicates an expected call of GetPerson.
func (mr *MockstorageMockRecorder) GetPerson(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPerson", reflect.TypeOf((*Mockstorage)(nil).GetPerson), ctx, id)
}

// GetPersons mocks base method.
func (m *Mockstorage) GetPersons(ctx context.Context) ([]Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersons", ctx)
	ret0, _ := ret[0].([]Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersons indicates an expected call of GetPersons.
func (mr *MockstorageMockRecorder) GetPersons(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersons", reflect.TypeOf((*Mockstorage)(nil).GetPersons), ctx)
}

// UpdatePerson mocks base method.
func (m *Mockstorage) UpdatePerson(ctx context.Context, id int, person *Person) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePerson", ctx, id, person)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePerson indicates an expected call of UpdatePerson.
func (mr *MockstorageMockRecorder) UpdatePerson(ctx, id, person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePerson", reflect.TypeOf((*Mockstorage)(nil).UpdatePerson), ctx, id, person)
}
